use std::str::FromStr;

grammar(db: &dyn crate::ParserDatabase);

pub Program: crate::Program = {
    "program " <id:ProgramID> <block: BeginBlock> "end" => crate::Program::new(db, id, block),
};

pub BeginBlock: Vec<crate::Statement> = {
    // parse empty string
    => vec![],
    // parse a series of statements
    "begin" <statements: Statement*> "end" => statements,
};

pub Statement: crate::Statement = {
    // parse a return expression
    "return " <expr: Expression> ";" => crate::Statement::new(crate::StatementData::Return(expr)),
};

pub Expression: crate::Expression = {
    <number: Num> => crate::Expression::new(crate::ExpressionData::Number(number)),
};

Num: u64 = <s:r"[0-9]+"> => u64::from_str(s).unwrap();
ProgramID: crate::ProgramId = <s:r"[[:alpha:]][\d\w\-_]*\??"> => crate::ProgramId::new(db, s.to_string());
